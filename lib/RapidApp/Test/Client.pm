package RapidApp::Test::Client;

use strict;
use warnings;

# Object class for simulating RapidApp HTTP client sessions

use Moo;
use Types::Standard qw(:all);

use RapidApp;
use Scalar::Util qw(blessed);
use Time::HiRes qw(gettimeofday tv_interval);
use LWP::UserAgent;
use HTTP::Request::Common;
use JSON qw(decode_json);

has 'ajax_request_headers', is => 'ro', default => sub {{
  'X-RapidApp-RequestContentType' => 'JSON',
  'X-RapidApp-VERSION'            => $RapidApp::VERSION,
  'X-Requested-With'              => 'XMLHttpRequest',
  'Content-Type'                  => 'application/x-www-form-urlencoded; charset=UTF-8',
}}, isa => HashRef;

has 'request_num',   is => 'rw', default => sub{0}, isa => Int;
has 'last_request',  is => 'rw', default => sub{undef}, isa => Maybe[InstanceOf['HTTP::Request']];
has 'last_response', is => 'rw', default => sub{undef}, isa => Maybe[InstanceOf['HTTP::Response']];
has 'last_request_elapsed',  is => 'rw', default => sub{undef}, isa => Maybe[Str];
has 'last_url',      is => 'rw', default => sub{undef}, isa => Maybe[Str];

# i.e. http://localhost:3000
has 'base_url', is => 'ro', isa => Maybe[Str], default => sub {undef};

has 'agent_string', is => 'ro', lazy => 1, default => sub { 
  my $self = shift;
  return (ref $self);
}, isa => Str;

has 'request_caller', is => 'ro', lazy => 1, default => sub {
  my $self = shift;
  
  # create in a closure:
  my $ua = LWP::UserAgent->new;
	$ua->agent($self->agent_string);
  
  return sub {
    my $request = shift;
    return $ua->request($request);
  }
}, isa => CodeRef;

sub make_request {
  my ($self, $req) = @_;
  
  $self->last_request(undef);
  $self->last_response(undef);
  $self->last_request_elapsed(undef);
  $self->request_num( $self->request_num + 1 );
  
  my $start = [gettimeofday];
  
  my $res = $self->last_response(
    $self->request_caller->(
      $self->last_request($req)
    )
  );
  
  $self->last_request_elapsed(sprintf("%0.5f sec",tv_interval($start)));
  
  return $res;
}

sub normalize_url {
  my ($self, $url) = @_;
  
  $url = join('',$self->base_url,$url) if (
    $self->base_url &&
    $url =~ /^\// #<-- starts with '/'
  );

  return $self->last_url($url);
}


sub get_request {
  my ($self, $url, $headers) = @_;
  $url = $self->normalize_url($url);
  my $req = GET($url);
  $req->header( %$headers ) if ($headers);
  $self->make_request($req);
}

sub post_request {
  my ($self, $url, $params, $headers) = @_;
  $url = $self->normalize_url($url);
  my $arr_arg = ref($params) eq 'HASH' ? [%$params] : $params;
  my $req = POST($url,$params);
  $req->header( %$headers ) if ($headers);
  $self->make_request($req);
}

sub last_request_is_ajax {
  my $self = shift;
  my $req = $self->last_request or return 0;
  my $req_with = $req->header('X-Requested-With');
  return $req_with && $req_with eq 'XMLHttpRequest';
}

sub last_request_type {
  my $self = shift;
  return '(none)' unless ($self->last_request);
  return $self->last_request_is_ajax ? 'Ajax' : 'Browser';
}

sub describe_request {
  my $self = shift;
  my $req = $self->last_request or return '(no request)';
  
  my @list = (
    ' <r', $self->request_num,'> ',
    $self->last_request_type,
    '->', $req->method, '(\'',$req->uri->path,'\')',
  );
  
  # If we already have the response, include the elapsed time:
  push @list,('  [',$self->last_request_elapsed,']')
    if ($self->last_response);
  
  return join('',@list);
}

# Simulate an Ajax POST request as if it was generated by the
# RapidApp/ExtJS JavaScript client/browser to a JSON-encoded
# resource. Decodes and returns the JSON as perl ref
sub ajax_post_decode {
  my ($self, $url, $params) = @_;
  
  my $res = $self->post_request($url, $params, $self->ajax_request_headers);
  my $decoded = decode_json($res->decoded_content);

  return $decoded;
}


sub ajax_get_raw {
  my ($self, $url) = @_;
  
  my $res = $self->get_request($url, $self->ajax_request_headers);
  
  return $res->decoded_content;
}


sub ajax_get_decode {
  my ($self, $url) = @_;
  
  my $content = $self->ajax_get_raw($url);
  my $decoded = decode_json($content);

  return $decoded;
}



1;