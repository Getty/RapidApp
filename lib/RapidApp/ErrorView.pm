package RapidApp::ErrorView;

use Moose;
extends 'RapidApp::AppStoreForm2';

use RapidApp::Include qw(perlutil sugar);

use RapidApp::DbicExceptionStore;

# make sure the as_html method gets loaded into StackTrace, which might get deserialized
use Devel::StackTrace;
use Devel::StackTrace::WithLexicals;
use Devel::StackTrace::AsHTML;

has 'exceptionStore' => ( is => 'rw', isa => 'Str|RapidApp::Role::ExceptionStore' );
has 'useParentExceptionStore' => ( is => 'rw', isa => 'Bool', lazy => 1, default => 0 );

my $read_only_style= {
	'background-color'	=> 'transparent',
	'border-color'		=> 'transparent',
	'background-image'	=> 'none',
	
	# the normal text field has padding-top: 2px which makes the text sit towards
	# the bottom of the field. We set top and bot here to move one of the px to the
	# bottom so the text will be vertically centered but take up the same vertical
	# size as a normal text field:
	'padding-top'		=> '1px',
	'padding-bottom'	=> '1px'
};

sub BUILD {
	my $self= shift;
	
	# Register ourselves with RapidApp if no other has already been registered
	# This affects any hyperlinks to exception reports generated by RapidApp modules.
	defined $self->app->rapidApp->errorViewPath
		or $self->app->rapidApp->errorViewPath($self->module_path);
	
	$self->apply_actions(
		view => 'view',
		gen_die => 'gen_die',
		gen_error => 'gen_error',
		gen_usererror => 'gen_usererror',
	);
	
	$self->auto_web1(1);
	
	$self->apply_extconfig(
		labelAlign	=> 'left',
		bodyStyle	=> 'padding:25px 25px 15px 15px;',
		labelWidth 	=> 130,
		defaults => {
			xtype 		=> 'displayfield',
			width			=> 'auto',
			#style => $read_only_style
		}
	);
	
	$self->add_formpanel_items(
		{ name => 'id',          fieldLabel => 'ID' },
		{ name => 'dateTime',    fieldLabel => 'Date' },
		{ name => 'message',     fieldLabel => 'Message' },
		{ name => 'userMessage', fieldLabel => 'UserMsg' },
		{ name => 'srcLoc',      fieldLabel => 'Source Loc' },
		{ name => 'trace',       fieldLabel => 'Trace' },
		{ name => 'cause',       fieldLabel => 'Cause' },
		{ name => 'data',        fieldLabel => 'Debug Info' },
	);
	
	$self->DataStore->apply_flags(
		can_read	=> 1,
		can_update	=> 0,
		can_create	=> 0,
	);
}

sub getExceptionStoreObj {
	my $self= shift;
	if ($self->useParentExceptionStore) {
		return $self->parent_module->exceptionStore;
	}
	else {
		my $e= $self->exceptionStore;
		defined $e or die "No ExceptionStore configured";
		ref $e or $e= $self->c->model($e);
		return $e;
	}
}

sub getExceptionObj {
	my ($self, $id)= @_;
	# Generating an exception while trying to view exceptions wouldn't be too useful
	#   so we trap and display exceptions specially in this module.
	my $err;
	try {
		defined $id or die "No ID specified";
		
		my $store= $self->getExceptionStoreObj;
		defined $store or die "No ExceptionStore configured";
		ref $store or $store= $self->c->model($store);
		
		$err= $store->loadException($id);
	}
	catch {
		$err= { id => $id, error => $_ };
	};
	return $err;
}

sub read_records {
	my ($self, $params)= @_;
	my $id = $params->{id};
	defined $id or die "cannot lookup row without id";
	my $store= $self->getExceptionStoreObj;
	defined $store or die "No ExceptionStore configured";
	ref $store or $store= $self->c->model($store);
	
	my $err= $store->loadException($id);
	my $srcLoc= $err->srcLoc;
	defined $srcLoc and $srcLoc =~ s|.*?/lib/||;
	
	my $traceStr;
	for my $frame ($err->trace->frames) {
		my $fname= $frame->filename;
		$fname =~ s|.*?/lib/perl[^/]+/([^A-Z][^/]*/)*||;
		$fname =~ s|.*?/lib/||;
		my $loc= sprintf('<font color="blue">%s</font> line <font color="blue">%d</font>', $fname, $frame->line);
		my $call= sprintf('<b>%s</b>( %s )', $frame->subroutine, join (', ',$frame->args) );
		$call =~ s/([^ ]+)=HASH[^ ,]+/\\%$1/g;
		$traceStr .= '<div class="trace" style="padding: .3em 0 1em 0">'.$loc.' : <br/><span style="padding:1px 2em"> </span>'.$call.'</div>';
	}
	
	my $htmlRenderCxt= RapidApp::Web1RenderContext->new();
	
	$htmlRenderCxt->data2html($err->cause);
	my $causeStr= $htmlRenderCxt->getBody;
	
	$htmlRenderCxt->body_fragments([]);
	$htmlRenderCxt->data2html($err->data);
	my $dataStr= $htmlRenderCxt->getBody;
	
	my $row= {
		id => $id,
		message => $err->message,
		userMessage => $err->userMessage,
		dateTime => $err->dateTime->ymd .' '. $err->dateTime->hms,
		srcLoc => $srcLoc,
		trace => $traceStr,
		cause => $causeStr,
		data => $dataStr,
	};
	return {
		results	=> 1,
		rows	=> [ $row ],
	};
}

sub gen_die {
	die "Deliberately generating an exception";
}

sub gen_error {
	die RapidApp::Error->new("Generating an exception using the RapidApp::Error class");
}

sub gen_usererror {
	die usererr "PEBKAC";
}

=pod
sub extconfig {
	my $self= shift;
	my $id= $self->c->req->params->{id};
	defined $id or die "No ID specified";
	
	my $err= $self->getExceptionObj($id);
	
	return {
		xtype => 'box',
		html => $self->c->view("RapidApp::TT")->render($self->c, 'templates/rapidapp/exception.tt', { ex => $err })
	};
}

sub web1config {
	my $self= shift;
	my $extCfg= $self->extconfig;
	return $extCfg->{html};
}

=cut
1;
