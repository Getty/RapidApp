package RapidApp::ErrorView;

use Moose;
extends 'RapidApp::AppStoreForm2';

use RapidApp::Include qw(perlutil sugar);

use RapidApp::DbicExceptionStore;

# make sure the as_html method gets loaded into StackTrace, which might get deserialized
use Devel::StackTrace;
use Devel::StackTrace::WithLexicals;
use Devel::StackTrace::AsHTML;

has 'exceptionStore' => ( is => 'rw', isa => 'Str|RapidApp::Role::ExceptionStore' );
has 'useParentExceptionStore' => ( is => 'rw', isa => 'Bool', lazy => 1, default => 0 );

sub BUILD {
	my $self= shift;
	
	# Register ourselves with RapidApp if no other has already been registered
	# This affects any hyperlinks to exception reports generated by RapidApp modules.
	defined $self->app->rapidApp->errorViewPath
		or $self->app->rapidApp->errorViewPath($self->base_url);
	
	$self->apply_actions(
		view => 'view',
		die => 'gen_die',
		error => 'gen_error',
		usererror => 'gen_usererror',
	);
	
	$self->auto_web1(1);
}

sub getExceptionStoreObj {
	my $self= shift;
	if ($self->useParentExceptionStore) {
		return $self->module_parent->exceptionStore;
	}
	else {
		my $e= $self->exceptionStore;
		defined $e or die "No ExceptionStore configured";
		ref $e or $e= $self->c->model($e);
		return $e;
	}
}

sub getExceptionObj {
	my ($self, $id)= @_;
	# Generating an exception while trying to view exceptions wouldn't be too useful
	#   so we trap and display exceptions specially in this module.
	my $err;
	try {
		defined $id or die "No ID specified";
		
		my $store= $self->getExceptionStoreObj;
		defined $store or die "No ExceptionStore configured";
		ref $store or $store= $self->c->model($store);
		
		$err= $store->loadException($id);
	}
	catch {
		$err= { id => $id, error => $_ };
	};
	return $err;
}

sub extconfig {
	my $self= shift;
	my $id= $self->c->req->params->{id};
	defined $id or die "No ID specified";
	
	my $err= $self->getExceptionObj($id);
	
	return {
		xtype => 'box',
		html => $self->c->view("RapidApp::TT")->render($self->c, 'templates/rapidapp/exception.tt', { ex => $err })
	};
}

sub web1config {
	my $self= shift;
	my $extCfg= $self->extconfig;
	return $extCfg->{html};
}

sub gen_die {
	die "Deliberately generating an exception";
}

sub gen_error {
	die RapidApp::Error->new("Generating an exception using the RapidApp::Error class");
}

sub gen_usererror {
	die usererr "PEBKAC";
}

1;
