package RapidApp::Role::TopController;
#
# -------------------------------------------------------------- #
#


use strict;
use warnings;
use Moose::Role;
with 'RapidApp::Role::Controller';

use RapidApp::ScopedGlobals;
use Try::Tiny;

our $VERSION = '0.1';

#### --------------------- ####


has 'app_title' 						=> ( is => 'ro',	default => 'RapidApp Application'		);

sub BUILD {}

after 'BUILD' => sub {
	my $self= shift;
	$self->auto_viewport(1);
};

around 'Controller' => sub {
	my $orig = shift;
	my $self = shift;
	my ( $c, @args ) = @_;
	
	# mask the globals with the values for this request
	local $RapidApp::ScopedGlobals::CatalystInstance= $c;
	local $RapidApp::ScopedGlobals::Log= $c->log;
	
	my $result;
	
	# put the debug flag into the stash, for easy access in templates
	$c->stash->{debug} = $c->debug;
	
	try {
		# provide hints for our controllers on what contect type is expected
		$c->stash->{requestContentType}=
			$c->req->header('X-RapidApp-RequestContentType')
			|| $c->req->param('RequestContentType')
			|| '';
		
		# now run the controller
		$c->stash->{controllerResult} = $result = $self->$orig($c, @args);
	}
	catch {
		#if ($self->storeExceptions) {
		#}
		
		$c->stash->{exception}= $_;
		my $msg= ''.$_;
		chomp($msg);
		$c->log->error("RapidApp Exception: ".$msg);
		if ($c->log->is_debug) {
			if (blessed($_)) {
				if ($_->can('dump')) { $c->log->debug($_->dump); }
				elsif ($_->can('trace')) { $c->log->debug($_->trace); }
			}
		}
		
		# on exceptions, we either generate a 503, or a JSON response to the same effect
		if ($self->c->stash->{requestContentType} eq 'JSON') {
			$c->stash->{current_view}= 'RapidApp::JSON';
		}
		else {
			$c->stash->{current_view}= 'RapidApp::HTTP';
			$c->res->status(404);
		}
	};
	
	# clear out any temporarily cached attributes generated by this request
	$self->recursive_clear_per_request_vars;
	
	# if the body was not set, make sure a view was chosen
	defined $c->res->body || defined $c->stash->{current_view} || defined defined $self->c->stash->{current_view_instance}
		or die "No view was selected, and a body was not generated";
	
	return $result;
};

# backward-compatibility shim
sub viewpanel {
	return (shift)->viewport;
}

# build a HTML viewport for the ExtJS content
# we override the config_url and the title
after 'viewport' => sub {
	my $self= shift;
	$self->c->stash->{config_url} = $self->base_url . '/' . $self->default_module;
	$self->c->stash->{title} = $self->app_title;
};


1;
