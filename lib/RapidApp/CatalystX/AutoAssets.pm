package RapidApp::CatalystX::AutoAssets;

our $VERSION = '0.01';
use Moose::Role;
use namespace::autoclean;


=head1 NAME

RapidApp::CatalystX::AutoAssets - Catalyst Plugin

=head1 DESCRIPTION

Application-wide CAS/checksum serving of JavaScript and CSS.

This Plugin provides the RapidApp/Catalyst application with dynamic, CAS/checksum 
rendering of JavaScript and CSS "Assets". Special Asset source directories are 
automatically scanned for *.js and *.css files. These source directories are under 
the following 2 paths (but configurable via the Controller 'inc' attribute):

 * HOME/rapidapp/src.d/*
 * HOME/root/src.d/*

Where HOME is the Application home directory. Built-in RapidApp CSS/JS sources are 
stored under the first path (which is actually 'src.d/' under the root of the 
rapidapp git repo via symlink in a properly configured app) and all additional, 
app-specific CSS/JS sources should be stored under the second path. Files are read 
in by shell glob in sorted/filename order.

These Source Asset files are automatically combined (and optionally minified) into 
single files ("Built Assets" - one file for all JS and one file for all CSS) with 
the filenames <SHA1>.js and <SHA1>.css, where <SHA1> is the 40-character sha1 
checksum of the file contents. 

The files are stored in the 'built_dir' ('built_assets/' within the Application 
home dir) and served from the special Controller setup at the app url path '/asset'

The mtimes of the source asset files are tracked and the Built Asset files are 
automatically regenerated whenever a change is detected. The files are automatically 
included (currently in the HTML head section of the ext_page.tt RapidApp template, 
but this is subject to change in the near future) with the following TT directive:

 [% c.autoasset_include_tags %]

This renders text content similar to the following:

 <!--   AUTO GENERATED BY RaExample1::Controller::Asset (AutoAssets)   -->
 <link 
  rel="stylesheet" 
  type="text/css" 
  href="/asset/12b8c05c85c8e9c93f118f0936273125f0150364/rapidapp-minified.css" 
 />
 <script 
  type="text/javascript" 
  src="/asset/fe19f3343e7a1872914c2650fa10933173016689/rapidapp-minified.js"
 ></script>
 <!--  ---- END AUTO GENERATED ASSETS ----  -->


Additionally, because the paths are CAS-based, highly aggressive HTTP Cache-Control 
header settings are used ('public, max-age=31536000, s-max-age=31536000') for maximum 
cache-enabled performance boost without any risk of stale content.

The primary purpose of this Plugin is to eliminate all cache problems in client 
browsers between version changes (as it is not practical to get all users to hit F5 
after deploying a new version with js/css changes) and still achieve the performance 
benefits of aggressive caching. It also provides an easier way to manage CSS/JS source 
files.

Still TODO: Handling of image assets and supporting CSS with relative url 
link/references

=cut

use RapidApp::Include qw(sugar perlutil);

use CatalystX::InjectComponent;
use Catalyst::Utils;

with 'Catalyst::Plugin::AutoAssets';

before 'inject_asset_controllers' => sub {
  my $c = shift;
  
  my $cnf = { assets => {
    'Controller::Assets::ExtJS' => {
      type => 'directory',
      include => 'ext-3.4.0',
      persist_state => 1,
      sha1_string_length => 15
    } 
  }};
  
  $c->config( 'Plugin::AutoAssets' => 
    Catalyst::Utils::merge_hashes($cnf, $c->config->{'Plugin::AutoAssets'} || {} )
  );

};



sub extjs_include_tags {
  my $c = shift;
  
  my @css = qw(
    resources/css/ext-all.css
    resources/css/xtheme-gray.css
    examples/ux/fileuploadfield/css/fileuploadfield.css
  );
  
  my @js = qw(
    adapter/ext/ext-base.js
    ext-all-debug.js
    src/debug.js
    examples/ux/fileuploadfield/FileUploadField.js
  );
  
  my @tags = ();
  push @tags, '<link rel="stylesheet" type="text/css" href="' .
    $c->controller('Assets::ExtJS')->asset_path($_) .
  '" />' for (@css);
  
  push @tags, '<script type="text/javascript" src="' .
    $c->controller('Assets::ExtJS')->asset_path($_) .
  '"></script>' for (@js);
  
  my $html = 
		"\r\n\r\n<!--   AUTO GENERATED BY " . ref($c) . " (AutoAssets)   -->\r\n" .
		( scalar @tags > 0 ? 
			join("\r\n",@tags) : '<!--      NO ASSETS AVAILABLE      -->'
		) .
		"\r\n<!--  ---- END AUTO GENERATED ASSETS ----  -->\r\n\r\n";
  
  return $html;
}



after 'setup_components' => sub {
    my $class = shift;
    CatalystX::InjectComponent->inject(
        into => $class,
        component => 'RapidApp::CatalystX::AutoAssets::Controller',
        as => 'Controller::Asset'
    );
};

sub autoasset_include_tags {
	my $c = shift;
	return $c->controller('Asset')->html_head_includes;
}

1;


__END__

